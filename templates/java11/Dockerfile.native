####
# Nitric Membrane infrastructure
ARG PROVIDER=local
FROM nitricimages/membrane-${PROVIDER}:latest as membrane

####
# Build JAR using JDK and Maven
FROM maven:3-openjdk-11 as maven

# TODO: FROM with openjdk-11 + maven + graalvm

# TODO: remove once Nitric Java SDK publically hosted
COPY settings.xml /root/.m2/settings.xml

# download maven plugins
COPY ./function/pom.xml ./pom.xml
RUN mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies

# build function JAR file
COPY ./function/src ./src
RUN mvn clean package

####
# Build native image using GraalVM
FROM springci/graalvm-ce:stable-java11-0.9.x as graalvm

ARG TARGET_JAR=target/hello-world-1.0.jar
COPY --from=maven ${TARGET_JAR} ${TARGET_JAR}

RUN native-image --verbose --no-fallback --static -jar ${TARGET_JAR} target/function

####
# Build production image
FROM alpine:latest

# Add the membrane server binary and plugins
COPY --from=membrane /membrane /usr/local/bin/membrane
RUN chmod +x-rw /usr/local/bin/membrane

COPY --from=graalvm target/function function
RUN chmod +x-rw function

# Expose the gateways proxy port
EXPOSE 9001/tcp

# AWS Lambda requires the working directory to be explicitly set
WORKDIR /

# Run the Nitric Membrane
# This process will load membrane provider plugins and kick-off the userland process
# full path Entrypoint required for AWS Lambda
ENTRYPOINT ["/usr/local/bin/membrane"]

# Set membrane child process command and args
CMD ["/function"]